import Foundation

/// File generated by the rake `gen_resources` command.
/// Do not edit
public struct HtmlReporterResources {

      public static let css =
"""
body {
  background-color: #f5f5f5;
}

div.info-box {
  height: 120px;
}

main.main {
  padding-top: 30px;
}

.swift {
  background-color: #EE5541;
}

.objc {
  background-color: #5E565A;
}

.xc-build-info {
  text-align: right;
  color: #6c757d;
}
.xc-content {
  margin: 10px;
}

.xc-navbar {
  border: 1px solid rgba(0,0,0,.125);
  background-color: rgba(0,0,0,.03);
  border-bottom: 1px solid rgba(0,0,0,.125);
}

.navbar-light .navbar-brand {
  color: gray;
}

.xc-header {
  height: 40px;
}

.xc-topboxes {
  margin-left: 35px;
  margin-right: 35px;
  margin: 10px;
}

.callout-danger {
  border-left: 4px solid red !important;
}

.callout-warning {
  border-left: 4px solid #ffc107 !important;
}

.callout {
  position: relative;
  padding: 0 1rem;
  margin: 1rem 0;
  border-left: 4px solid #c8ced3;
  border-radius: .25rem;
}

.header-title {
  float: left
}
.header-action {
  float: right
}

.header-action a {
  color: gray;
  text-decoration: none;
}

.xc-card-body {
  padding: .75em;
}

"""

      public static let appJS =
"""
// Copyright (c) 2019 Spotify AB.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

let mainStep;
let targets;
let cFiles;
let swiftFiles;

const rowHeight = 45;

const swiftAggregatedCompilation = 'swiftAggregatedCompilation';

const swiftCompilation = 'swiftCompilation';

const cCompilation = 'cCompilation'

const incidentSource = "<details>" +
    "<summary><span class='font-weight-bold'>{{count}}</span>{{summary}}</summary>" +
    "<p class='bg-light'>" +
    "<ul>" +
    "{{#each details}}" +
    "{{#if documentURL}}" +
    "<li>{{clangWarning}} {{title}} " +
    "In <a href='{{documentURL}}'>{{documentURL}}</a> Line {{startingLineNumber}} column {{startingColumnNumber}}</li>" +
    "{{else}}" +
    "<li>{{clangWarning}} {{title}}</li>" +
    "{{/if}}" +
    "{{/each}}" +
    "</ul>" +
    "</p>" +
    "</details>";

const incidentTemplate = Handlebars.compile(incidentSource);

const swiftFunctionSource = "<table id='swift-functions-table' class='display table table-sm table-hover table-responsive table-striped'>" +
    "<thead>" +
    "<tr>" +
    "<th scope='col'>Duration (ms)</th>" +
    "<th scope='col'>File</th>" +
    "<th scope='col'>Function</th>" +
    "<th scope='col'>Line</th>" +
    "<th scope='col'>Column</th>" +
    "<th scope='col'>Occurrences</th>" +
    "<th scope='col'>Cumulative (ms)</th>" +
    "</tr>" +
    "</thead>" +
    "{{#each functions}}" +
    "<tr>" +
    "<th scope='col'>{{durationMS}}</th>" +
    "<th scope='col'>{{file}}</th>" +
    "<th scope='col'>{{signature}}</th>" +
    "<th scope='col'>{{startingLine}}</th>" +
    "<th scope='col'>{{startingColumn}}</th>" +
    "<th scope='col'>{{occurrences}}</th>" +
    "<th scope='col'>{{cumulative}}</th>" +
    "</tr>" +
    "{{/each}}" +
    "</table>";

const swiftTypeCheckSource = "<table id='swift-typechecks-table' class='table table-sm table-hover table-responsive table-striped'>" +
    "<thead>" +
    "<tr>" +
    "<th scope='col'>Duration (ms)</th>" +
    "<th scope='col'>File</th>" +
    "<th scope='col'>Line</th>" +
    "<th scope='col'>Column</th>" +
    "<th scope='col'>Occurrences</th>" +
    "<th scope='col'>Cumulative (ms)</th>" +
    "</tr>" +
    "</thead>" +
    "{{#each functions}}" +
    "<tr>" +
    "<th scope='col'>{{durationMS}}</th>" +
    "<th scope='col'>{{file}}</th>" +
    "<th scope='col'>{{startingLine}}</th>" +
    "<th scope='col'>{{startingColumn}}</th>" +
    "<th scope='col'>{{occurrences}}</th>" +
    "<th scope='col'>{{cumulative}}</th>" +
    "</tr>" +
    "{{/each}}" +
    "</table>";

const swiftFunctionWarning = "<div class='callout callout-warning'>" +
    "<small class='text-muted'>Warning: No Swift function compilation times were found.</small>" +
    "<br>" +
    "Did you compile your project with the flags -Xfrontend -debug-time-function-bodies?" +
    "</div>";

const swiftTypeCheckWarning = "<div class='callout callout-warning'>" +
    "<small class='text-muted'>Warning: No Swiftc type checks times were found.</small>" +
    "<br>" +
    "Did you compile your project with the flags -Xfrontend -debug-time-expression-type-checking?" +
    "</div>";

const swiftFunctionTemplate = Handlebars.compile(swiftFunctionSource);

const swiftTypeCheckTemplate = Handlebars.compile(swiftTypeCheckSource);

drawCharts();

function drawCharts() {
    const target = getRequestedTarget();
    if (target === 'main') {
        loadMainData();
    } else {
        loadTargetData(target);
    }
    drawHeaders(target);
    drawErrors(target);
    drawWarnings(target);
    drawTimeline(target);
    drawSlowestTargets(target);

    if (target === 'main') {
        document.getElementById('files-row').style.display = 'flex';
        drawSlowestFiles(cSlowestFiles, '#top_cfiles', target);
        drawSlowestFiles(swiftSlowestFiles, '#top_swiftfiles', target);
    } else {
        document.getElementById('files-row').style.display = 'none';
    }
    drawSwiftFunctions(target);
    drawSwiftTypeChecks(target);
}

function drawHeaders(target) {
    setBuildStatus();
    document.getElementById('build-info').innerHTML = getBuildInfo();
    if (target === 'main') {
        document.getElementById('schema-title').innerHTML = 'Schema';
        document.getElementById('schema').innerHTML = mainStep.schema;
        document.getElementById('targets-title').innerHTML = 'Targets';
    } else {
        document.getElementById('schema-title').innerHTML = 'Target';
        document.getElementById('schema').innerHTML = mainStep.title.replace('Build target', '');
        document.getElementById('targets-title').innerHTML = 'Files';
    }
    const status = mainStep.buildStatus.charAt(0).toUpperCase() + mainStep.buildStatus.slice(1);
    document.getElementById('build-status').innerHTML = status;
    const duration = moment.duration(mainStep.duration * 1000);
    var durationText = '';
    if (duration.hours() > 0) {
        durationText += duration.hours() + ' hrs, ';
    }
    if (duration.minutes() > 0) {
        durationText += duration.minutes() + ' mins, ';
    }
    durationText += Math.round(duration.seconds()) + ' secs';
    document.getElementById('build-time').innerHTML = durationText;
    document.getElementById('targets').innerHTML = targets.length.toLocaleString('en');

    document.getElementById('c-files-total').innerHTML = cFiles.length.toLocaleString('en') + ' total';
    document.getElementById('swift-files-total').innerHTML = swiftFiles.length.toLocaleString('en') + ' total';

}

function setBuildStatus() {
    const status = mainStep.buildStatus.charAt(0).toUpperCase() + mainStep.buildStatus.slice(1);
    const statusBox = document.getElementById('status-box');
    if (status.toLowerCase() === 'succeeded') {
        statusBox.classList.add('bg-success');
    } else if (status.toLowerCase().includes('failed') || status.toLowerCase().includes('errors')) {
        statusBox.classList.add('bg-danger');
    } else {
        statusBox.classList.add('bg-warning');
    }
}

function getBuildInfo() {
    const infoData = buildData[0];
    const buildDate = new Date(infoData.startTimestamp * 1000);
    let info = infoData.title.replace('Build ', '');
    info += ' Build ' + infoData.identifier + ', generated on ';
    info += buildDate.toLocaleString();
    return info;
}

function loadMainData() {
    mainStep = buildData[0];
    targets = buildData.filter(function (step) {
        return step.type === 'target' && step.fetchedFromCache === false;
    });
    cFiles = buildData.filter(function (step) {
        return step.type === 'detail' && step.detailStepType === cCompilation
            && step.fetchedFromCache === false;
    });
    swiftFiles = buildData.filter(function (step) {
        return step.type === 'detail' && step.detailStepType === swiftCompilation
            && step.fetchedFromCache === false;
    });
}

function loadTargetData(target) {
    mainStep = buildData[0];

    targets = buildData.filter(function (element) {
        return element.parentIdentifier === target && element.fetchedFromCache === false;
    });

    // In xcodebuild, the swift files compilation are under an Aggregated build step.
    // This code adds them and removes the aggregated steps
    swiftAggregatedBuilds = targets.filter(function (step) {
        return step.detailStepType === swiftAggregatedCompilation;
    });
    const aggregatedSubSteps = swiftAggregatedBuilds.flatMap(function (aggregate) {
        return buildData.filter(function (element) {
            return element.parentIdentifier === aggregate.identifier;
        });
    });
    targets = targets.concat(aggregatedSubSteps).filter(function (step) {
        return step.detailStepType != swiftAggregatedCompilation;
    }).sort(function (lhs, rhs) {
        return lhs.startTimestamp - rhs.startTimestamp;
    });

    cFiles = targets.filter(function (step) {
        return step.detailStepType === cCompilation;
    });
    swiftFiles = targets.filter(function (step) {
        return step.detailStepType === swiftCompilation;
    });
}

function drawTimeline(currentTarget) {
    const dataSeries = targets.map(function (target) {
        const title = getShortFilename(target.title, target.architecture);
        const targetStartTimestamp = target.startTimestamp;
        const targetEndTimestamp = target.endTimestamp;
        const start = targetStartTimestamp;
        const end = targetEndTimestamp === targetStartTimestamp ? targetEndTimestamp + 1 : targetEndTimestamp;

        return {
            x: title,
            y: [new Date(start * 1000).getTime(),
            new Date(end * 1000).getTime()],
            start: targetStartTimestamp,
            end: targetEndTimestamp
        };
    });

    const compilationSeries = targets.map(function (target) {
        const title = getShortFilename(target.title, target.architecture);
        const targetStartTimestamp = target.startTimestamp;
        const targetEndTimestamp = target.compilationEndTimestamp;
        const start = targetStartTimestamp;
        const end = targetEndTimestamp === targetStartTimestamp ? targetEndTimestamp + 1 : targetEndTimestamp;

        return {
            x: title,
            y: [new Date(start * 1000).getTime(),
            new Date(end * 1000).getTime()],
            start: targetStartTimestamp,
            end: targetEndTimestamp
        };
    });


    var options = {
        series: [
            {
                name: 'Build time',
                data: dataSeries
            },
            {
                name: 'Compilation time',
                data: compilationSeries
            }
        ],
        chart: {
            height: dataSeries.length * rowHeight,
            type: 'rangeBar',
            events: {
                dataPointSelection: function (event, chartContext, config) {
                    const selectedItem = targets[config.dataPointIndex];
                    itemSelected(currentTarget, selectedItem);
                }
            }
        },
        plotOptions: {
            bar: {
                horizontal: true,
                barHeight: '80%'
            }
        },
        xaxis: {
            type: 'datetime'
        },
        stroke: {
            width: 1
        },
        fill: {
            type: 'solid',
            opacity: 0.6
        },
        legend: {
            position: 'top',
            horizontalAlign: 'left'
        },
        tooltip: {
            enabled: true,
            custom: function ({series, seriesIndex, dataPointIndex, w}) {
                const serie = dataSeries[dataPointIndex];
                const start = serie.start;
                const end = serie.end;
                const duration = (end - start).toFixed(3);
                return '<div class="arrow_box">' +
                    '<span>' + serie.x + ' </span><br>' +
                    '<span>' + duration + ' seconds</span>' +
                    '</div>'
            },
            y: {
                enabled: true,
                show: true,
                formatter: undefined,
                title: {
                    formatter: (seriesName) => seriesName,
                },
            },

        }
    };

    var chart = new ApexCharts(document.querySelector("#timeline"), options);
    chart.render();
}

function drawSlowestTargets(target) {
    let clone = targets.slice(0);
    const targetsData = clone.sort(function (lhs, rhs) {
        return rhs.duration - lhs.duration
    });
    const top = Math.min(20, targetsData.length);
    const topTargets = targetsData.slice(0, top);
    const durations = topTargets.map(function (target) {
        return target.duration.toFixed(3);
    });
    const names = topTargets.map(function (step) {
        if (target === 'main') {
            return step.title.replace('Build target ', '');
        } else {
            return getShortFilename(step.title, step.architecture);
        }
    });
    const options = {
        chart: {
            height: names.length * rowHeight,
            type: 'bar',
            events: {
                dataPointSelection: function (event, chartContext, config) {
                    const selectedItem = topTargets[config.dataPointIndex];
                    itemSelected(target, selectedItem);
                }
            }
        },
        plotOptions: {
            bar: {
                distributed: true,
                horizontal: true
            }
        },
        dataLabels: {
            enabled: false
        },
        series: [{
            data: durations
        }],
        xaxis: {
            categories: names
        },
        legend: {
            show: false
        },
        tooltip: {
            y: {
                title: {
                    formatter: function () {
                        return 'Seconds'
                    }
                }
            }
        }
    }

    var chart = new ApexCharts(
        document.querySelector("#bartargets"),
        options
    );

    chart.render();
}


function drawSlowestFiles(collection, element, currentTarget) {
    const sortedData = collection.sort(function (lhs, rhs) {
        return rhs.duration - lhs.duration;
    });
    const top = Math.min(20, sortedData.length);
    const topTargets = sortedData.slice(0, top);
    const durations = topTargets.map(function (target) {
        return target.duration.toFixed(3);
    });
    const names = topTargets.map(function (step) {
        return getShortFilename(step.title, step.architecture);
    });
    const options = {
        chart: {
            height: names.length * rowHeight,
            type: 'bar',
            events: {
                dataPointSelection: function (event, chartContext, config) {
                    const selectedItem = topTargets[config.dataPointIndex];
                    itemSelected(currentTarget, selectedItem);
                }
            }
        },
        plotOptions: {
            bar: {
                distributed: true,
                horizontal: true
            }
        },
        dataLabels: {
            enabled: false
        },
        series: [{
            data: durations
        }],
        xaxis: {
            categories: names
        },
        legend: {
            show: false
        },
        tooltip: {
            y: {
                title: {
                    formatter: function () {
                        return 'Seconds'
                    }
                }
            }
        }
    }

    var chart = new ApexCharts(
        document.querySelector(element),
        options
    );

    chart.render();
}

function getRequestedTarget() {
    return "{{target_name}}";
}

function getShortFilename(fileName, arch) {
    if (fileName.includes('/')) {
        const components = fileName.replace('Compile ', '').split('/');
        const command = fileName.split(' ')[0]
        const startIndex = Math.max(3, components.length - 3);
        if (arch != '') {
            return command + ' ' + arch + ' ' + components.slice(startIndex, components.length).join('/');
        }
        return command + ' ' + components.slice(startIndex, components.length).join('/');
    } else {
        return fileName
    }
}

function drawErrors(target) {
    $('#errors-count').html(mainStep.errorCount);
    showErrors(target);
}

function drawWarnings(target) {
    $('#warnings-count').html(mainStep.warningCount);
    showWarnings(target);
}

function showErrors(target) {
    var stepsErrors;
    if (target === 'main') {
        stepsErrors = stepsWithErrors;
    } else {
        stepsErrors = targets.filter(function (step) {
            return step.type != 'main' && step.type != 'target' && step.errorCount > 0;
        }).sort(function (lhs, rhs) {
            return rhs.errorCount - lhs.errorCount;
        });
    }
    var summaries = '';
    stepsErrors.forEach(function (step) {
        const errorLegend = step.errorCount > 1 ? " errors in " : " error in ";
        summaries += incidentTemplate({"count": step.errorCount + errorLegend, "summary": step.signature, "details": step.errors});
    });
    $('#errors-summary').html(summaries);
    if (stepsErrors.length > 0) {
        $('#errors').show();
    } else {
        $('#errors').hide();
    }
}

function showWarnings(target) {
    var stepsWarnings;
    if (target === 'main') {
        stepsWarnings = stepsWithWarnings;
    } else {
        stepsWarnings = buildData.filter(function (step) {
            return step.type != 'target' && step.warningCount > 0;
        }).sort(function (lhs, rhs) {
            return rhs.errorCount - lhs.errorCount;
        });
    }
    var summaries = '';
    stepsWarnings.forEach(function (step) {
        if (step.warnings.length > 0) {
            const warningLegend = step.warningCount > 1 ? " warnings in " : " warning in ";
            summaries += incidentTemplate({"count": step.warningCount + warningLegend, "summary": step.signature, "details": step.warnings});
        }
    });
    $('#warnings-summary').html(summaries);
    if (stepsWarnings.length > 0) {
        $('#warnings').show();
    } else {
        $('#warnings').hide();
    }
}

function itemSelected(target, selectedItem) {
    if (selectedItem.type === 'target') {
        const fileName = selectedItem.identifier.replaceAll(' ', '_').replaceAll('\\\'', '_');
        window.location.href = window.location.href.replace('index.html', fileName + '.html');
    } else if (selectedItem.type === 'detail') {
        const targetId = selectedItem.parentIdentifier.replaceAll(' ', '_').replaceAll('\\\'', '_');
        if (target === 'main') {
            const stepUrl = window.location.href.replace(encodeURI('{{file_name}}'), targetId + '.html');
            window.location.href = stepUrl + "?step=" + selectedItem.identifier;
        } else {
            const stepUrl = window.location.href.replace(encodeURI('{{file_name}}'), '{{steps_name}}');
            window.location.href = stepUrl + "?step=" + selectedItem.identifier;
        }
    }
}

function drawSwiftFunctions(target) {
    let swiftFunctions;
    if (target === 'main') {
        swiftFunctions = topSwiftFunctions;
    } else {
        swiftFunctions = targets.filter(function (step) {
            return step.swiftFunctionTimes && step.swiftFunctionTimes.length > 0;
        }).flatMap(function (step) {
            return step.swiftFunctionTimes
        });
    }

    const cumulativeSwiftFunctions = swiftFunctions.map(function (f) {
        f.cumulative = Math.round(f.occurrences * f.durationMS * 100) / 100;
        return f;
    });
    if (cumulativeSwiftFunctions.length > 0) {
        const functions = swiftFunctionTemplate({"functions": cumulativeSwiftFunctions});
        $('#swiftfunctions').html(functions);
        $('#swift-functions-table').DataTable({
            "info": false,
            "scrollX": true,
            "order": [[0, "desc"]]
        });
    } else {
        $('#swiftfunctions').html(swiftFunctionWarning);
    }
}

function drawSwiftTypeChecks(target) {
    let swiftTypeCheckTimes;
    if (target === 'main') {
        swiftTypeCheckTimes = topSwifTypeChecks;
    } else {
        swiftTypeCheckTimes = targets.filter(function (step) {
            return step.swiftTypeCheckTimes && step.swiftTypeCheckTimes.length > 0;
        }).flatMap(function (step) {
            return step.swiftTypeCheckTimes
        });
    }

    const cumulativeSwiftTypeCheckTimes = swiftTypeCheckTimes.map(function (f) {
        f.cumulative = Math.round(f.occurrences * f.durationMS * 100) / 100;
        return f;
    });
    if (swiftTypeCheckTimes.length > 0) {
        const functions = swiftTypeCheckTemplate({"functions": cumulativeSwiftTypeCheckTimes});
        $('#swifttypechecks').html(functions);
        $('#swift-typechecks-table').DataTable({
            "info": false,
            "scrollX": true,
            "order": [[0, "desc"]]
        });
    } else {
        $('#swifttypechecks').html(swiftTypeCheckWarning);
    }
}

"""

      public static let buildJS =
"""
const buildData = {{build}};
"""

public static let indexHTML =
"""
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>XCLogParser build report</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.datatables.net/1.10.20/css/jquery.dataTables.min.css" >
  <link rel="stylesheet" href="css/styles.css">
</head>

<body class="app header-fixed">
  <header class="app-header navbar navbar-expand-lg navbar-light xc-navbar">

    <a href="index.html" class="navbar-brand">XCLogParser</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
      aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <div class="navbar-nav ml-md-auto" style="padding-right: 30px;">
      </div>
    </div>
  </header>

  <div class="app-body">
    <main class="main">
      <div class="container-fluid">
          <div class="row">
            <div class="col-12 xc-build-info warning" id='build-info'>
            </div>
          </div>
          <div class="row">
            <div class="col-md-2 col-sm-1">
              <div class="card xc-topboxes text-white bg-primary info-box">
                <div class="card-header" id="schema-title">Schema</div>
                <div class="xc-card-body card-body">
                  <div id="schema" class="card-text"></div>
                </div> <!-- card body -->
              </div> <!-- card-->
            </div> <!-- col -->
            <div class="col-md-2 col-sm-1">
              <div id="status-box" class="card xc-topboxes text-white info-box">
                <div class="card-header">Build status</div>
                <div class="xc-card-body card-body">
                  <div id="build-status" class="card-text"></div>
                </div> <!-- card body -->
              </div> <!-- card-->
            </div> <!-- col -->
            <div class="col-md-2 col-sm-1">
              <div class="card text-white xc-topboxes bg-info info-box">
                <div class="card-header">Build time</div>
                <div class="xc-card-body card-body">
                  <div id="build-time" class="card-text"></div>
                </div> <!-- card-body -->
              </div> <!-- card -->
            </div>
            <!--/.col-->
            <div class="col-md-2 col-sm-1">
              <div class="card text-white xc-topboxes bg-info info-box">
                <div class="card-header" id="targets-title">Number of targets</div>
                <div class="xc-card-body card-body">
                  <div id="targets" class="card-text"></div>
                </div> <!-- card-body -->
              </div> <!-- card -->
            </div>
            <!--/.col-->
            <div class="col-md-2 col-sm-1">
              <div class="card text-white xc-topboxes objc info-box">
                <div class="card-header">C files</div>
                <div class="xc-card-body card-body">
                  <div class="card-block">
                    <div class="row">
                        <div class="col">
                          <div id="c-files-compiled" class="card-text"></div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                          <div id="c-files-total" class="card-text"></div>
                        </div>
                    </div>
                  </div> <!-- card-block -->
                </div> <!-- card-body -->
              </div> <!-- card -->
            </div>
            <!--/.col-->
            <div class="col-md-2 col-sm-1">
              <div class="card text-white xc-topboxes swift info-box">
                  <div class="card-header">Swift files</div>
                <div class="xc-card-body card-body">
                  <div class="card-block">
                    <div class="row">
                      <div class="col">
                        <div id="swift-files-compiled" class="card-text"></div>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col">
                        <div id="swift-files-total" class="card-text"></div>
                      </div>
                    </div>
                  </div> <!-- card-block -->
                </div> <!-- card-body -->
              </div> <!-- card -->
            </div>
            <!--/.col-->
          </div> <!-- row -->


        <div class="row" id="errors-row">
          <div class="col-12">
            <div class="card xc-content">
              <div class="card-header">
                <div class="header-title">🛑 Errors</div>
                <div class="header-action">
                  <a class="card-header-action" href="#" data-toggle="collapse"
                    data-target="#collapse-errors" aria-expanded="true">
                    △
                  </a>
                </div>
              </div> <!-- card header-->
              <div id="collapse-errors" class="collapse show">
                <div class="card-body">
                  <div class="row">
                    <div class="col-sm-6">
                      <div class="callout callout-danger">
                        <small class="text-muted">Total</small>
                        <br>
                        <strong class="h4" id="errors-count"></strong>
                      </div>
                    </div>
                  </div>
                  <div class="row" id="errors">
                    <div class="col-sm-12">
                      <details>
                        <summary>Show errors</summary>
                          <p id="errors-summary"></p>
                      </details>
                    </div>
                  </div>
                </div> <!-- card body -->
              </div> <!-- collapse-errors -->
            </div> <!-- card -->
          </div> <!-- errors col-->
        </div> <!-- errors row -->

        <div class="row" id="warnings-row">
          <div class="col-12">
            <div class="card xc-content">
              <div class="card-header">
                <div class="header-title">⚠️ Warnings</div>
                <div class="header-action">
                  <a class="card-header-action" href="#" data-toggle="collapse"
                    data-target="#collapse-warnings" aria-expanded="true">
                    △
                  </a>
                </div>
              </div> <!-- card header-->
              <div id="collapse-warnings" class="collapse show">
              <div class="card-body">
                <div class="row">
                  <div class="col-sm-6">
                    <div class="callout callout-warning">
                      <small class="text-muted">Total</small>
                      <br>
                      <strong class="h4" id="warnings-count"></strong>
                    </div>
                  </div>
                </div>
                <div class="row" id="warnings">
                    <div class="col-sm-12">
                      <details>
                        <summary>Show warnings</summary>
                        <p id="warnings-summary"></p>
                      </details>
                    </div>
                </div>
              </div> <!-- card body -->
            </div> <!-- collapse-warnings -->
            </div> <!-- card -->
          </div> <!-- warnings col-->
        </div> <!-- warnings row -->

        <div class="row h-90">
          <div class="col-12">
            <div class="card xc-content">
              <div class="card-header">
                <div class="header-title">🕗 Timeline</div>
                <div class="header-action">
                  <a class="card-header-action" href="#" data-toggle="collapse"
                    data-target="#collapse-timeline" aria-expanded="true">
                    △
                  </a>
                </div>
              </div> <!-- card header-->
              <div id="collapse-timeline" class="collapse show">
                <div class="card-body" id="timeline-body">
                  <div id="timeline"></div>
                </div> <!-- card body -->
              </div> <!-- collapse-timeline -->

            </div> <!-- card -->
          </div> <!-- timeline col-->
        </div> <!-- timeline row -->

        <div class="row">
          <div class="col-12">
            <div class="card xc-content">
              <div class="card-header">
                <div class="header-title">⏳ Slowest targets</div>
                <div class="header-action">
                  <a class="card-header-action" href="#" data-toggle="collapse"
                    data-target="#collapse-bartargets" aria-expanded="true">
                    △
                  </a>
                </div>
              </div>
              <div id="collapse-bartargets" class="collapse show">
                <div class="card-body">
                  <div id="bartargets"></div>
                </div> <!-- card-body -->
              </div> <!--collapse-bartargets -->
            </div> <!-- card -->
          </div> <!-- col -->
        </div> <!-- row -->
        <div class="row" id="files-row">
          <div class="col-6">
            <div class="card xc-content">
              <div class="card-header">
                <div class="header-title">⏳ Slowest C files compilation</div>
                <div class="header-action">
                  <a class="card-header-action" href="#" data-toggle="collapse"
                    data-target="#collapse-top_cfiles" aria-expanded="true">
                    △
                  </a>
                </div> <!-- header-action -->
              </div> <!-- card header -->
              <div id="collapse-top_cfiles" class="collapse show">
                <div class="card-body">
                  <div id="top_cfiles" style="width: 100%; height: 70%;"></div>
                </div> <!-- card body -->
              </div> <!-- collapse-top_cfiles -->
            </div> <!-- card -->
          </div> <!-- col -->

          <div class="col-6">
            <div class="card xc-content">
              <div class="card-header">
                <div class="header-title">⏳ Slowest Swift files compilation</div>
                <div class="header-action">
                  <a class="card-header-action" href="#" data-toggle="collapse"
                    data-target="#collapse-top_swiftfiles" aria-expanded="true">
                    △
                  </a>
                </div> <!-- header-action -->
              </div> <!-- card title -->
              <div id="collapse-top_swiftfiles" class="collapse show">
                <div class="card-body">
                  <div id="top_swiftfiles" style="width: 100%; height: 70%;"></div>
                </div> <!-- card body -->
              </div> <!-- collapse-top_cfiles -->
            </div> <!-- card -->
          </div> <!-- col -->
        </div> <!-- top files row -->
        <div class="row">
          <div class="col-12">
            <div class="card xc-content">
              <div class="card-header">
                <div class="header-title">Swift functions build time</div>
                <div class="header-action">
                  <a class="card-header-action" href="#" data-toggle="collapse"
                    data-target="#collapse-swiftfunctions" aria-expanded="true">
                    △
                  </a>
                </div>
              </div>
              <div id="collapse-swiftfunctions" class="collapse show">
                <div class="card-body">
                  <div id="swiftfunctions"></div>
                </div> <!-- card-body -->
              </div> <!--collapse-swiftfunctions -->
            </div> <!-- card -->
          </div> <!-- col -->
        </div> <!-- row -->
        <div class="row">
          <div class="col-12">
            <div class="card xc-content">
              <div class="card-header">
                <div class="header-title">Swift Type check times</div>
                <div class="header-action">
                  <a class="card-header-action" href="#" data-toggle="collapse"
                    data-target="#collapse-swifttypechecks" aria-expanded="true">
                    △
                  </a>
                </div>
              </div>
              <div id="collapse-swifttypechecks" class="collapse show">
                <div class="card-body">
                  <div id="swifttypechecks"></div>
                </div> <!-- card-body -->
              </div> <!--collapse-swifttypechecks -->
            </div> <!-- card -->
          </div> <!-- col -->
        </div> <!-- row -->

      </div> <!-- container-fluid -->

    </main>

  </div> <!-- app body-->

  <footer class="app-footer">
    <!-- Footer content here -->
  </footer>
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.2/handlebars.min.js"></script>
  <script type="text/javascript" src="js/{{data_file}}"></script>
  <script type="text/javascript" src="js/errors_warnings.js"></script>
  <script type="text/javascript" src="js/top_files.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.23.0/moment-with-locales.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
  <script src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
  <script type="text/javascript" src="js/{{app_file}}"></script>
</body>
</html>

"""

public static let stepHTML =
"""
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>XCLogParser build report</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
  <link rel="stylesheet" href="css/styles.css">
</head>

<body class="app header-fixed">
  <header class="app-header navbar navbar-expand-lg navbar-light xc-navbar">

    <a href="index.html" class="navbar-brand">XCLogParser</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
      aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <div class="navbar-nav ml-md-auto" style="padding-right: 30px;">
      </div>
    </div>
  </header>

  <div class="app-body">
    <main class="main">
      <div class="container-fluid">
        <div class="row">
          <div class="col-12 xc-build-info warning" id='build-info'>
          </div>
        </div>

        <div class="row" id="info-row">
          <div class="col-12">
            <div class="card xc-content">
              <div class="card-header">
                <div class="header-title" id="info-title"></div>
                <div class="header-action">
                  <a class="card-header-action" href="#" data-toggle="collapse"
                    data-target="#collapse-info" aria-expanded="true">
                    △
                  </a>
                </div>
              </div> <!-- card header-->
              <div id="collapse-info" class="collapse show">
                <div class="card-body">
                  <div class="row">
                    <div class="col-sm-2">
                      File
                    </div>
                    <div class="col-sm-10">
                      <a id="info-url" href=""></a>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-sm-2">
                      Fetched from cache
                    </div>
                    <div class="col-sm-10">
                      <button type="button" class="btn btn-secondary" data-toggle="tooltip" data-placement="right" title="If true, the target or file wasn't compiled but fetched from Xcode's internal cache">
                        <div id="info-cache" href=""></div>
                      </button>

                    </div>
                  </div>
                  <div class="row">
                    <div class="col-sm-2">
                      Duration
                    </div>
                    <div class="col-sm-10">
                        <div id="info-duration"></div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-sm-2">
                      Start time
                    </div>
                    <div class="col-sm-10">
                      <div id="info-start-time"></div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-sm-2">
                      End time
                    </div>
                    <div class="col-sm-10">
                      <div id="info-end-time"></div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-sm-2">
                      Signature
                    </div>
                    <div class="col-sm-10">
                      <div id="info-signature"></div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-sm-2">
                      Architecture
                    </div>
                    <div class="col-sm-10">
                      <div id="info-arch"></div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-sm-2">
                      Time trace file
                    </div>
                    <div class="col-sm-10">
                      <a id="info-time-trace-file" href=""></a>
                    </div>
                  </div>
                </div> <!-- card body -->
              </div> <!-- collapse-info -->
            </div> <!-- card -->
          </div> <!-- info col-->
        </div> <!-- info row -->

        <div class="row" id="errors-row">
            <div class="col-12">
              <div class="card xc-content">
                <div class="card-header">
                  <div class="header-title">🛑 Errors</div>
                  <div class="header-action">
                    <a class="card-header-action" href="#" data-toggle="collapse"
                      data-target="#collapse-errors" aria-expanded="true">
                      △
                    </a>
                  </div>
                </div> <!-- card header-->
                <div id="collapse-errors" class="collapse show">
                <div class="card-body">
                  <div class="row">
                    <div class="col-sm-6">
                      <div class="callout callout-danger">
                        <small class="text-muted">Total</small>
                        <br>
                        <strong class="h4" id="errors-count"></strong>
                      </div>
                    </div>
                  </div>
                  <div class="row" id="errors">
                      <div class="col-sm-12" id="errors-summary">
                      </div>
                  </div>
                </div> <!-- card body -->
              </div> <!-- collapse-errors -->
              </div> <!-- card -->
            </div> <!-- errors col-->
          </div> <!-- errors row -->

        <div class="row" id="warnings-row">
          <div class="col-12">
            <div class="card xc-content">
              <div class="card-header">
                <div class="header-title">⚠️ Warnings</div>
                <div class="header-action">
                  <a class="card-header-action" href="#" data-toggle="collapse"
                    data-target="#collapse-warnings" aria-expanded="true">
                    △
                  </a>
                </div>
              </div> <!-- card header-->
              <div id="collapse-warnings" class="collapse show">
              <div class="card-body">
                <div class="row">
                  <div class="col-sm-6">
                    <div class="callout callout-warning">
                      <small class="text-muted">Total</small>
                      <br>
                      <strong class="h4" id="warnings-count"></strong>
                    </div>
                  </div>
                </div>
                <div class="row" id="warnings">
                    <div class="col-sm-12" id="warnings-summary">
                    </div>
                </div>
              </div> <!-- card body -->
            </div> <!-- collapse-warnings -->
            </div> <!-- card -->
          </div> <!-- warnings col-->
        </div> <!-- warnings row -->

        <div class="row" id="functions-row">
            <div class="col-12">
              <div class="card xc-content">
                <div class="card-header">
                  <div class="header-title">Swift function times</div>
                  <div class="header-action">
                    <a class="card-header-action" href="#" data-toggle="collapse"
                      data-target="#collapse-functions" aria-expanded="true">
                      △
                    </a>
                  </div>
                </div> <!-- card header-->

                <div class="card-body">
                  <div class="row" id="functions">
                    <div class="col-sm-12" id="functions-summary">
                    </div>
                  </div>
                </div> <!-- card body -->
              </div> <!-- card -->
            </div> <!-- functions col-->
        </div> <!-- functions row -->

        <div class="row" id="typechecks-row">
          <div class="col-12">
            <div class="card xc-content">
              <div class="card-header">
                <div class="header-title">Swift type check times</div>
                <div class="header-action">
                  <a class="card-header-action" href="#" data-toggle="collapse"
                    data-target="#collapse-typechecks" aria-expanded="true">
                    △
                  </a>
                </div>
              </div> <!-- card header-->

              <div class="card-body">
                <div class="row" id="typechecks">
                  <div class="col-sm-12" id="typechecks-summary">
                  </div>
                </div>
              </div> <!-- card body -->
            </div> <!-- card -->
          </div> <!-- typechecks col-->
      </div> <!-- typechecks row -->

      </div> <!-- container-fluid -->

    </main>

  </div> <!-- app body-->

  <footer class="app-footer">
    <!-- Footer content here -->
  </footer>

  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.2/handlebars.min.js"></script>
  <script type="text/javascript" src="js/{{data_file}}"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.23.0/moment-with-locales.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
  <script type="text/javascript" src="js/step.js"></script>
</body>
</html>

"""

public static let stepJS =
"""
// Copyright (c) 2019 Spotify AB.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

const incidentSource = "<ul>" +
  "{{#each details}}" +
  "{{#if documentURL}}" +
  "<li>{{clangWarning}} {{title}} " +
  "In <a href='{{documentURL}}'>{{documentURL}}</a> Line {{startingLineNumber}} column {{startingColumnNumber}}</li>" +
  "{{else}}" +
  "<li>{{clangWarning}} {{title}}</li>" +
  "{{/if}}" +
  "{{/each}}" +
  "</ul>" +
  "</p>" +
  "</details>";

const incidentTemplate = Handlebars.compile(incidentSource);

const swiftFunctionSource = "<table class=\\"table table-sm table-hover table-responsive\\">" +
  "<thead>" +
  "<tr>" +
  "<th scope=\\"col\\">Duration (ms)</th>" +
  "<th scope=\\"col\\">Function</th>" +
  "<th scope=\\"col\\">Line</th>" +
  "<th scope=\\"col\\">Column</th>" +
  "<th scope=\\"col\\">Occurrences</th>" +
  "<th scope=\\"col\\">Cumulative (ms)</th>" +
  "</tr>" +
  "</thead>" +
  "{{#each functions}}" +
  "<tr>" +
  "<th scope=\\"col\\">{{durationMS}}</th>" +
  "<th scope=\\"col\\">{{signature}}</th>" +
  "<th scope=\\"col\\">{{startingLine}}</th>" +
  "<th scope=\\"col\\">{{startingColumn}}</th>" +
  "<th scope=\\"col\\">{{occurrences}}</th>" +
  "<th scope=\\"col\\">{{cumulative}}</th>" +
  "</tr>" +
  "{{/each}}" +
  "</table>";

const swiftTypeCheckSource = "<table class=\\"table table-sm table-hover table-responsive\\">" +
  "<thead>" +
  "<tr>" +
  "<th scope=\\"col\\">Duration (ms)</th>" +
  "<th scope=\\"col\\">Line</th>" +
  "<th scope=\\"col\\">Column</th>" +
  "<th scope=\\"col\\">Occurrences</th>" +
  "<th scope=\\"col\\">Cumulative (ms)</th>" +
  "</tr>" +
  "</thead>" +
  "{{#each functions}}" +
  "<tr>" +
  "<th scope=\\"col\\">{{durationMS}}</th>" +
  "<th scope=\\"col\\">{{startingLine}}</th>" +
  "<th scope=\\"col\\">{{startingColumn}}</th>" +
  "<th scope=\\"col\\">{{occurrences}}</th>" +
  "<th scope=\\"col\\">{{cumulative}}</th>" +
  "</tr>" +
  "{{/each}}" +
  "</table>";

const swiftFunctionWarning = "<div class=\\"callout callout-warning\\">" +
"<small class=\\"text-muted\\">Warning: No Swift function compilation times were found.</small>" +
"<br>" +
"Did you compile your project with the flags -Xfrontend -debug-time-function-bodies?" +
"</div>";

const swiftTypeCheckWarning = "<div class=\\"callout callout-warning\\">" +
"<small class=\\"text-muted\\">Warning: No Swiftc type checks times were found.</small>" +
"<br>" +
"Did you compile your project with the flags -Xfrontend -debug-time-expression-type-checking?" +
"</div>";

const swiftFunctionTemplate = Handlebars.compile(swiftFunctionSource);

const swiftTypeCheckTemplate = Handlebars.compile(swiftTypeCheckSource);

const timestampFormat = 'MMMM Do YYYY, h:mm:ss a';

showStep();

$(function () {
  $('[data-toggle="tooltip"]').tooltip()
});

function showStep() {
  const step = loadStep();
  if (step != null) {
    $('#info-title').html(step.title);
    $('#info-cache').html(step.fetchedFromCache);
    $('#info-signature').html(step.signature);
    $('#info-arch').html(step.architecture);
    $('#info-url').html(step.documentURL);
    $('#info-url').attr("href", step.documentURL);
    $('#info-duration').html(step.duration + ' secs.');
    $('#info-start-time').html(moment(new Date(step.startTimestamp * 1000)).format(timestampFormat));
    $('#info-end-time').html(moment(new Date(step.endTimestamp * 1000)).format(timestampFormat));
    $('#info-time-trace-file').html(step.clangTimeTraceFile);
    $('#info-time-trace-file').attr("href", step.clangTimeTraceFile);
    showStepErrors(step);
    showStepWarnings(step);
    showSwiftFunctionTimes(step);
    showSwiftTypeCheckTimes(step);
  }
}

function loadStep() {
  const stepId = getRequestedStepId();
  if (stepId != null) {
    const steps = buildData.filter(function (step) {
      return stepId == step.identifier;
    });
    return steps[0];
  }
  return null;
}

function getRequestedStepId() {
  let name = "step"
  if (name = (new RegExp('[?&]' + encodeURIComponent(name) + '=([^&]*)')).exec(location.search)) {
    return decodeURIComponent(name[1]);
  } else {
    return null;
  }
}

function showStepErrors(step) {
  const errorLegend = step.errorCount > 1 ? " errors in " : " error in ";
  const summaries = incidentTemplate({ "count": step.errorCount + errorLegend, "summary": step.signature, "details": step.errors });
  $('#errors-count').html(step.errorCount);
  $('#errors-summary').html(summaries);
}

function showStepWarnings(step) {
  const warningLegend = step.warningCount > 1 ? " warnings in " : " warning in ";
  const summaries = incidentTemplate({ "count": step.warningCount + warningLegend, "summary": step.signature, "details": step.warnings });
  $('#warnings-count').html(step.warningCount);
  $('#warnings-summary').html(summaries);
}

function showSwiftFunctionTimes(step) {
  if (step.detailStepType === 'swiftCompilation') {
    $('#functions-row').show();
    if (step.swiftFunctionTimes && step.swiftFunctionTimes.length > 0) {
      const cumulativeFunctions = step.swiftFunctionTimes.map(function(f) {
        f.cumulative = Math.round(f.occurrences * f.durationMS * 100) / 100;
        return f;
      });
      const functions = swiftFunctionTemplate({"functions": cumulativeFunctions});
      $('#functions-summary').html(functions);
    } else {
      $('#functions-summary').html(swiftFunctionWarning);
    }

  } else {
    $('#functions-row').hide();
  }
}

function showSwiftTypeCheckTimes(step) {
  if (step.detailStepType === 'swiftCompilation') {
    $('#typechecks-row').show();
    if (step.swiftTypeCheckTimes && step.swiftTypeCheckTimes.length > 0) {
      const cumulativeFunctions = step.swiftTypeCheckTimes.map(function(f) {
        f.cumulative = Math.round(f.occurrences * f.durationMS * 100) / 100;
        return f;
      });
      const functions = swiftTypeCheckTemplate({"functions": cumulativeFunctions});
      $('#typechecks-summary').html(functions);
    } else {
      $('#typechecks-summary').html(swiftTypeCheckWarning);
    }

  } else {
    $('#typechecks-row').hide();
  }
}

"""

}
