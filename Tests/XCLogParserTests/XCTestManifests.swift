#if !canImport(ObjectiveC)
import XCTest

extension ActivityParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ActivityParserTests = [
        ("testParseActivityLog", testParseActivityLog),
        ("testParseDBGConsoleLog", testParseDBGConsoleLog),
        ("testParseDVTTextDocumentLocation", testParseDVTTextDocumentLocation),
        ("testParseIBDocumentMemberLocation", testParseIBDocumentMemberLocation),
        ("testParseIDEActivityLogAnalyzerResultMessage", testParseIDEActivityLogAnalyzerResultMessage),
        ("testParseIDEActivityLogMessage", testParseIDEActivityLogMessage),
        ("testParseIDEActivityLogSection", testParseIDEActivityLogSection),
        ("testParseXcode3ProjectLocation", testParseXcode3ProjectLocation),
    ]
}

extension ChromeTracerOutputTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ChromeTracerOutputTests = [
        ("testTargetToTraceEvent", testTargetToTraceEvent),
    ]
}

extension IssuesReporterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IssuesReporterTests = [
        ("testReport", testReport),
    ]
}

extension LexRedactorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LexRedactorTests = [
        ("testMultiplePathsRedacting", testMultiplePathsRedacting),
        ("testNotInPredefinedUserDirIsNotRedacted", testNotInPredefinedUserDirIsNotRedacted),
        ("testPredefinedUserDirIsRedacted", testPredefinedUserDirIsRedacted),
        ("testRedacting", testRedacting),
        ("testRedactingComplexUsername", testRedactingComplexUsername),
        ("testRedactingFillsUserDir", testRedactingFillsUserDir),
        ("testRedactingHomePath", testRedactingHomePath),
    ]
}

extension LexerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LexerTests = [
        ("testTokenizeClassName", testTokenizeClassName),
        ("testTokenizeClassNameRef", testTokenizeClassNameRef),
        ("testTokenizeDouble", testTokenizeDouble),
        ("testTokenizeError", testTokenizeError),
        ("testTokenizeInt", testTokenizeInt),
        ("testTokenizeList", testTokenizeList),
        ("testTokenizeListNil", testTokenizeListNil),
        ("testTokenizeString", testTokenizeString),
        ("testTokenizeStringRedacted", testTokenizeStringRedacted),
        ("testTokenizeStringWithTokenDelimiters", testTokenizeStringWithTokenDelimiters),
    ]
}

extension LogFinderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LogFinderTests = [
        ("testGetLogManifestPathForNonExistingFile", testGetLogManifestPathForNonExistingFile),
        ("testGetLogManifestPathWithWorkspace", testGetLogManifestPathWithWorkspace),
        ("testGetLogManifestPathWithXcodeProj", testGetLogManifestPathWithXcodeProj),
        ("testGetLogsFromCustomDerivedData", testGetLogsFromCustomDerivedData),
        ("testGetProjectFolderWithHash", testGetProjectFolderWithHash),
        ("testLogsDirectoryForXcodeProject", testLogsDirectoryForXcodeProject),
    ]
}

extension LogManifestTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LogManifestTests = [
        ("testGetLatestLogEntry", testGetLatestLogEntry),
        ("testGetWithLogOptions", testGetWithLogOptions),
    ]
}

extension ParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParserTests = [
        ("testBuildIdentifierShouldUseMachineName", testBuildIdentifierShouldUseMachineName),
        ("testDateFormatterUsesJSONFormat", testDateFormatterUsesJSONFormat),
        ("testGetIndividualSteps", testGetIndividualSteps),
        ("testParseAppCompilationTimes", testParseAppCompilationTimes),
        ("testParseAppNoopCompilationTimes", testParseAppNoopCompilationTimes),
        ("testParseInterfaceBuilderWarning", testParseInterfaceBuilderWarning),
        ("testParseNote", testParseNote),
        ("testParseSwiftIssuesDetails", testParseSwiftIssuesDetails),
        ("testParseTargetCompilationTimes", testParseTargetCompilationTimes),
        ("testParseTargetName", testParseTargetName),
        ("testParseWarningsAndErrors", testParseWarningsAndErrors),
    ]
}

extension ReporterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReporterTests = [
        ("testMakeLogReporter", testMakeLogReporter),
    ]
}

extension SwiftCompilerParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwiftCompilerParserTests = [
        ("testParseSwiftFunctionTimes", testParseSwiftFunctionTimes),
        ("testParseSwiftTypeCheckTimes", testParseSwiftTypeCheckTimes),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ActivityParserTests.__allTests__ActivityParserTests),
        testCase(ChromeTracerOutputTests.__allTests__ChromeTracerOutputTests),
        testCase(IssuesReporterTests.__allTests__IssuesReporterTests),
        testCase(LexRedactorTests.__allTests__LexRedactorTests),
        testCase(LexerTests.__allTests__LexerTests),
        testCase(LogFinderTests.__allTests__LogFinderTests),
        testCase(LogManifestTests.__allTests__LogManifestTests),
        testCase(ParserTests.__allTests__ParserTests),
        testCase(ReporterTests.__allTests__ReporterTests),
        testCase(SwiftCompilerParserTests.__allTests__SwiftCompilerParserTests),
    ]
}
#endif
